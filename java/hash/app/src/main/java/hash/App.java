/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hash;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class App {


  public static void main(String[] args) {

    String input ="Once upon a time, there was a brave princess who...";
    System.out.println(RepeatedWord.repeatedWord(input));
  }

  public static List<Integer> treeIntersection(BinaryTree<Integer> binaryTree1, BinaryTree<Integer> binaryTree2) {

    List<Integer> l1 = binaryTree1.inOrder(binaryTree1.root);
    List<Integer> l2 = binaryTree2.inOrder(binaryTree2.root);

    List<Integer> output = new ArrayList<>();
    HashTable<Integer> hashTable = new HashTable<>(output.size() + 1);

    for (int i = 0; i < l1.size(); i++) {
      hashTable.add(l1.get(i), i); // add the values from list1 to hashtable
      System.out.println(hashTable);
      if (hashTable.contains(l2.get(i))) { //then compare if the hashtable contains every single value in list2 , so u compare values between l1 and l2
        output.add(l2.get(i)); // if yes add from list2 to output this means values found in both trees
      } else {
        hashTable.add(l2.get(i), i); // if not contain add from list2 to hashtable ,keep looping and check containing values
      }
    }
    return output;
  }
}

